#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

#define BUFFER_SIZE 1024

int main() {
    int fd; // File descriptor
    ssize_t ret; // Return value of read/write
    char buffer[BUFFER_SIZE]; // Buffer to read/write data

    // Open file for writing, creating it if it doesn't exist
    fd = open("example.txt", O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    // Write "hello world" to the file
    ret = write(fd, "hello world\n", 12);
    if (ret == -1) {
        perror("write");
        exit(EXIT_FAILURE);
    }

    // Close the file after writing
    close(fd);

    // Open file for reading
    fd = open("example.txt", O_RDONLY);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    // Read from the file
    ret = read(fd, buffer, BUFFER_SIZE);
    if (ret == -1) {
        perror("read");
        exit(EXIT_FAILURE);
    }

    // Null terminate the buffer to print it as a string
    buffer[ret] = '\0';

    // Print the read content
    printf("Read from file: %s", buffer);

    // Close the file after reading
    close(fd);

    return 0;
}



#!/bin/bash

# Prompt user to enter employee details
read -p "Enter employee name: " name
read -p "Enter hours worked: " hours_worked
read -p "Enter rate per hour: " rate_per_hour

# Calculate basic pay
basic_pay=$((hours_worked * rate_per_hour))

# Calculate tax based on basic pay
if [ $basic_pay -gt 70000 ]; then
    tax=$((basic_pay * 25 / 100))
elif [ $basic_pay -ge 15000 ] && [ $basic_pay -le 70000 ]; then
    tax=$((basic_pay * 15 / 100))
else
    tax=0
fi

# Calculate net pay
net_pay=$((basic_pay - tax))

# Display results
echo "Employee Name: $name"
echo "Basic Pay: $basic_pay"
echo "Tax: $tax"
echo "Net Pay: $net_pay"



#!/bin/bash

# Prompt the user to enter CustomerID, CustomerName, and UnitConsumed
read -p "Enter CustomerID: " customerId
read -p "Enter CustomerName: " customerName
read -p "Enter UnitConsumed: " unitConsumed

# Function to calculate the bill based on units consumed
calculate_bill() {
    local units=$1
    local bill=0

    if [ $units -le 199 ]; then
        bill=$((units * 120))
    elif [ $units -ge 200 ] && [ $units -lt 400 ]; then
        bill=$((units * 150))
    elif [ $units -ge 400 ] && [ $units -lt 600 ]; then
        bill=$((units * 180))
    else
        bill=$((units * 200))
    fi

    echo $bill
}

# Calculate the total bill
total_bill=$(calculate_bill $unitConsumed)

# Display the result
echo "CustomerID: $customerId"
echo "CustomerName: $â€¦
